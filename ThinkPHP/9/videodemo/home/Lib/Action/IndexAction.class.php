<?php
// 本类由系统自动生成，仅供测试用途
class IndexAction extends Action{
    public function index(){
      	//1, 创建一个 基础模型
      	//2，实例化一个系统自带的数据库操作类
      	
      	//2.0更加科学更加方便
      	
      	//我们可以不用自己去定义相关的数据库操作类
      	
      	//thinkphp他会自动的去帮我们找到这个数据库当中的表，并且把表当中的相应字段全部拿过来
      	
      	//直接操作这个对象，就是操作的这张表
      	//new Model,在Model当中传上一个我们需要操作的表即可
      	// 因为我们命名表的时候， think_user  thinkphp会按照大小写来区别你在前面有没有加_下划线
      	//    think_user_message_age
      	//就能够直接使用这个模型（这个数据库）操作类当中的方法去进行相应的操作
      	//$User=new Model('User');
      	
      	//因为thinkphp考虑到我们在操作的时候，每次写的 new Model
      	//$User=M('User');
      	
      	//便 捷操作（快捷操作）
      	
      	//$list=$User->select();
      	
      	//你要清楚，因为对于我们来说操作数组非常方便。而用数组分配到模板当中去进行遍历显示也是非常方便的。
      	
      	//所以thinkphp默认是返回一个数据
      	
      	//对于传统模   你可以不用去管遍历形成数组的过程了。 已经全部帮我们遍历好了。
      	//dump($list);
      	
      	//或者，你需要实化一个表，同时呢，实例化一个自己写的自定义数据库操作类
     /* 
     	$user=M('user','CommonModel');
      	
      	//$user=new CommonModel('user');
      	$list=$user->select();
      	
      	dump($list);
      	
      	$user->abd();
      	
      	*/
      	
      //实例化一个用户定义的模型
      //需要手动创建一个模型   user 可以针对这张表，来写上一个自定义模型，在自动模型当中可以封装thinkphp为我们提供一些高级功，还可以封装一些自定义方法来实现更加复杂的业务逻辑
      
      
      //你实化一个自定义模型的时候，一般情况下你的表名和你的类名（模型）
      //所以你在此处，不需要再核外的传什么表名。。。。
      
      //下面这种方法的话，他就已经将表名和相关字段找到了
    /*  //$user=new UserModel();
      
        $user=D('user');
        
        //D方法可以自动检测模型类，不存在时，它会抛出一个异常。同时对于已实例化过的模型，不会去重复实例化。默认的D方法只能支持调用当前项目（应用）下面的模型
        
        //如果说，我这是前台应用（项目），但是，我想实例化后台项目当中的模型怎么办？
        //user类，（模型）
        
        $user=D('admin','user');
        
        //D('admin.user');
        
      
      //  D
      
      $list=$user->select();
      
      dump($list);
      
      echo $user->aa();
      
      
      
      //你这当中实例模型的第二种方法和第三种法（实例化自定义模型）有何不同。
      
      //  你想啊。  你在你的业务逻辑当中，通常情况下有一些公共的业务逻辑。  那你用第二种M（'user','CommonModel'）
      //公共的业务逻辑，难道你每次都去自定义一个模型吗？ 太复杂。。。。
      //并且，你的这样一个实例化的模型当中，只需要使用thinkphp model类为我们提供的一些方法即可。没有更加复杂的业务逻辑了，但是只有一些共公的业务逻辑
      
      //第三种情况，这种情况适用于针对所操作表的更加复杂的业务逻辑，但是它不需要使用到公共业务逻辑。（它的业务逻辑，针对用户表，他是唯一的。并且，不需要在其他模型当中使用），在这种情况下面，我们就使用自定义模型
      
      
      */
    
    
    	//4,这种方式叫做实例一个空模型。它并不知道，你要实例化操作时的是哪一张表
    	
    	$user=M('user');
    	//与第四种方法等价的方法叫做  
    	//传统使用sql语句的方式,如果这样的话，就必须要加表前缀
    	$list=$user->select();
    	
    	
    	dump($list);
      
      	$this->display();
      	
      	
    }
    
    public function tt(){
    	//$this->assign();
    	$he='成功的爱情和婚姻都需要经营';
    	
    	$this->assign('hello',$he);
    	
    	$this->display();
    }
}
?>